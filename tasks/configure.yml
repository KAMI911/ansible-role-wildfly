---
# task file for wildfly

- block:
    - name: 'add .ssh directory for wildfly user'
      file:
        path: '{{ wildfly_system_home }}/home/.ssh/'
        owner: '{{ wildfly_user }}'
        group: '{{ wildfly_group }}'
        mode: '700'
        recurse: no
        state: directory

    - name: add ssh access for wildfly user
      template:
        src: wildfly_ssh.j2
        dest: '{{ wildfly_system_home }}/home/.ssh/authorized_keys'
        owner: '{{ wildfly_user }}'
        group: '{{ wildfly_group }}'
        mode: '0400'
  when:
   - __app_manage_user
   - wildfly_user_ssh_key | length > 0

- name: setting application ulimits
  pam_limits:
    domain: '{{ item.domain }}'
    limit_type: '{{ item.type }}'
    limit_item: '{{ item.item }}'
    value: '{{ item.value }}'
    dest: '{{ wildfly_limits_file }}.conf'
  with_items: '{{ wildfly_limits_conf }}'


- name: create wildfly etc directory
  become: true
  file:
    path: '{{ wildfly_conf_dir }}'
    state: directory
    owner: root
    group: '{{ wildfly_group }}'
    mode: '0750'
  when: wildfly_system_integration

- name: copy wildfly domain configuration
  become: true
  template:
    src: wildfly.conf.j2
    dest: '{{ wildfly_conf_dir }}/{{ wildfly_instance_name }}.conf'
    owner: root
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly services
    - change data mode
  when: wildfly_system_integration

- name: copy wildfly domain configuration
  template:
    src: wildfly.conf.j2
    dest: '{{ wildfly_base }}/domain/configuration/{{ wildfly_instance_name }}.conf'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly services
    - change data mode
  when: not wildfly_system_integration

- name: copy wildfly domain-controller configuration
  become: true
  template:
    src: wildfly-dc.conf.j2
    dest: '{{ wildfly_conf_dir }}/{{ wildfly_dc_instance_name }}.conf'
    owner: root
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly domain services
    - change data mode
  when:
   - wildfly_role == 'domain-master-slave'
   - wildfly_system_integration

- name: copy wildfly domain-controller configuration
  template:
    src: wildfly-dc.conf.j2
    dest: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}.conf'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly domain services
    - change data mode
  when:
   - wildfly_role == 'domain-master-slave'
   - not wildfly_system_integration

- name: 'create domain user configuration in: {{ wildfly_base }}/domain/configuration'
  copy:
    src: '{{ item }}'
    dest: '{{ wildfly_base }}/domain/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0600'
    force: false
  with_items:
    - application-roles.properties
    - application-users.properties
    - mgmt-groups.properties
    - mgmt-users.properties

- name: 'create domain server configuration in: {{ wildfly_base }}/domain/configuration'
  copy:
    src: '{{ wildfly_home }}/domain/configuration/{{ item }}'
    dest: '{{ wildfly_base }}/domain/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_file_mode }}'
    remote_src: true
    force: '{{ wildfly_config_file_force_overwrite }}'
  with_items:
    - default-server-logging.properties
    - domain.xml
    - '{{ wildfly_host_master_filename }}'
    - '{{ wildfly_host_slave_filename }}'
    - host.xml
    - logging.properties
  when: wildfly_mode == 'domain'

- name: 'Setting node password for domain members to connect domain-controller for host slaves'
  lineinfile:
    dest: '{{ wildfly_base }}/domain/configuration/{{ wildfly_host_slave_filename }}'
    regexp: '(.*)<secret value="(\S+)"(.*)$'
    line: '\1<secret value="{{ wildfly_node_password | b64encode }}"\3'
    backrefs: yes
  notify: restart wildfly services
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-slave', 'domain-master-slave' ]
  tags:
    - wildfly_domain_member

# - block:
#     - name: 'Setting node password for domain members to connect domain-controller for host slaves (1)'
#       xml:
#         path: '{{ wildfly_base }}/domain/configuration/{{ wildfly_host_slave_filename }}'
#         xpath: '/h:host/management/security-realms/security-realm'
#         namespaces:
#           h: 'urn:jboss:domain:{{ wildfly_file_version }}'
#         attribute: 'name'
#         value: 'SlaveRealm'
#     - name: 'Setting node password for domain members to connect domain-controller for host slaves (2)'
#       xml:
#         path: '{{ wildfly_base }}/domain/configuration/{{ wildfly_host_slave_filename }}'
#         xpath: '/h:host/management/security-realms/security-realm/server-identities'
#         namespaces:
#           h: 'urn:jboss:domain:{{ wildfly_file_version }}'
#         state: present
#     - name: 'Setting node password for domain members to connect domain-controller for host slaves (3)'
#       xml:
#         path: '{{ wildfly_base }}/domain/configuration/{{ wildfly_host_slave_filename }}'
#         xpath: '/h:host/management/security-realms/security-realm/server-identities/secret'
#         namespaces:
#           h: 'urn:jboss:domain:{{ wildfly_file_version }}'
#         attribute: 'value'
#         value: '{{ wildfly_node_password | b64encode }}'
#   when: wildfly_role in [ 'domain-slave', 'domain-master-slave' ]

- block:
    - name: configure domain server logging (1)
      lineinfile:
        dest: '{{ wildfly_base }}/domain/configuration/logging.properties'
        regexp: '^handler.BOOT_FILE.properties=.*$'
        line: 'handler.BOOT_FILE.properties=autoFlush,append,fileName'
        state: present
      notify: restart wildfly services

    - name: configure domain server logging (2)
      lineinfile:
        dest: '{{ wildfly_base }}/domain/configuration/logging.properties'
        regexp: '^handler.BOOT_FILE.append=.*$'
        line: 'handler.BOOT_FILE.append=true'
        insertafter: 'handler.BOOT_FILE.properties=autoFlush,append,fileName'
        state: present
      notify: restart wildfly services

    - name: configure domain server logging (3)
      lineinfile:
        dest: '{{ wildfly_base }}/domain/configuration/logging.properties'
        regexp: '^handler.BOOT_FILE.suffix=.*$'
        line: 'handler.BOOT_FILE.suffix=.yyyy-MM-dd'
        insertafter: 'handler.BOOT_FILE.formatter=PATTERN'
        state: present
      notify: restart wildfly services
  when: wildfly_mode == 'domain'

- name: 'create domain-controller user configuration in: {{ wildfly_base }}/domain-controller/configuration'
  copy:
    src: '{{ item }}'
    dest: '{{ wildfly_base }}/domain-controller/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0600'
    force: false
  with_items:
    - application-roles.properties
    - application-users.properties
    - mgmt-groups.properties
    - mgmt-users.properties
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master', 'domain-master-slave' ]

- name: 'create domain-controller server configuration in: {{ wildfly_base }}/domain-controller/configuration'
  copy:
    src: '{{ wildfly_home }}/domain/configuration/{{ item }}'
    dest: '{{ wildfly_base }}/domain-controller/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_file_mode }}'
    remote_src: true
    force: '{{ wildfly_config_file_force_overwrite }}'
  with_items:
    - default-server-logging.properties
    - domain.xml
    - '{{ wildfly_host_master_filename }}'
    - logging.properties
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master', 'domain-master-slave' ]

- block:
    - name: 'Setting domain-controller to use native port (1)'
      xml:
        path: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_host_master_filename }}'
        xpath: '/h:host/h:management/h:management-interfaces/h:native-interface'
        namespaces:
          h: 'urn:jboss:domain:{{ wildfly_file_version }}'
        attribute: 'security-realm'
        value: 'ManagementRealm'
        pretty_print: true
      notify: restart wildfly domain services
    - name: 'Setting domain-controller to use native port (2)'
      xml:
        path: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_host_master_filename }}'
        xpath: '/h:host/h:management/h:management-interfaces/h:native-interface'
        input_type: 'xml'
        namespaces:
          h: 'urn:jboss:domain:{{ wildfly_file_version }}'
        set_children:
          - '<socket interface="management" port="${jboss.management.native.port:{{ wildfly_master_port }}}"/>'
        pretty_print: true
      notify: restart wildfly domain services
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master-slave', 'domain-master' ]
  tags:
    - wildfly_domain_controller

- name: 'Setting domain member to use native port (1)'
  xml:
    path: '{{ wildfly_base }}/domain/configuration/{{ wildfly_host_slave_filename }}'
    xpath: '/h:host/h:domain-controller'
    input_type: 'xml'
    namespaces:
      h: 'urn:jboss:domain:{{ wildfly_file_version }}'
    set_children:
      - '<remote protocol="remote" host="${jboss.domain.master.address:{{ wildfly_master_address }}}" port="${jboss.domain.master.port:{{ wildfly_master_port }}}" username="{{ wildfly_bind_address }}" security-realm="ManagementRealm" />'
    pretty_print: true
  notify:
    - restart wildfly services
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-slave', 'domain-master-slave' ]

- block:
    - name: configure domain-controller server logging (1)
      lineinfile:
        dest: '{{ wildfly_base }}/domain-controller/configuration/logging.properties'
        regexp: '^handler.BOOT_FILE.properties=.*$'
        line: 'handler.BOOT_FILE.properties=autoFlush,append,fileName'
        state: present
      notify: restart wildfly domain services
    - name: configure domain-controller server logging (2)
      lineinfile:
        dest: '{{ wildfly_base }}/domain-controller/configuration/logging.properties'
        regexp: '^handler.BOOT_FILE.append=.*$'
        line: 'handler.BOOT_FILE.append=true'
        insertafter: 'handler.BOOT_FILE.properties=autoFlush,append,fileName'
        state: present
      notify: restart wildfly domain services
    - name: configure domain-controller server logging (3)
      lineinfile:
        dest: '{{ wildfly_base }}/domain-controller/configuration/logging.properties'
        regexp: '^handler.BOOT_FILE.suffix=.*$'
        line: 'handler.BOOT_FILE.suffix=.yyyy-MM-dd'
        insertafter: 'handler.BOOT_FILE.formatter=PATTERN'
        state: present
      notify: restart wildfly domain services
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master', 'domain-master-slave' ]
  tags:
    - wildfly_domain_controller

- name: 'create standalone user configuration in: {{ wildfly_base }}/standalone/configuration'
  copy:
    src: '{{ item }}'
    dest: '{{ wildfly_base }}/standalone/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0600'
    force: false
  with_items:
    - application-roles.properties
    - application-users.properties
    - mgmt-groups.properties
    - mgmt-users.properties

- name: 'create standalone server configuration configuration in: {{ wildfly_base }}/standalone/configuration'
  copy:
    src: '{{ wildfly_home }}/standalone/configuration/{{ item }}'
    dest: '{{ wildfly_base }}/standalone/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    remote_src: true
    force: '{{ wildfly_config_file_force_overwrite }}'
  with_items:
    - logging.properties
    - standalone-full-ha.xml
    - standalone-full.xml
    - standalone-ha.xml
    - standalone.xml
  when: wildfly_mode == 'standalone'

- name: copy wildfly domain configuration
  template:
    src: domain.conf.j2
    dest: '{{ wildfly_base }}/domain/configuration/domain.conf'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly services
    - change data mode
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-slave', 'domain-master-slave' ]

- name: copy wildfly standalone configuration
  template:
    src: domain.conf.j2
    dest: '{{ wildfly_base }}/standalone/configuration/domain.conf'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0640'
  notify:
    - restart wildfly services
    - change data mode
  when:
    - wildfly_mode == 'standalone'

- name: create symlink to /etc/default/wildfly.conf
  become: true
  file:
    state: link
    src: '{{ wildfly_conf_dir }}/{{ wildfly_instance_name }}.conf'
    dest: /etc/default/{{ wildfly_instance_name }}.conf
    force: true
  when: wildfly_system_integration

- block:
    - name: copy wildfly domain domain-controller configuration
      template:
        src: domain-dc.conf.j2
        dest: '{{ wildfly_base }}/domain-controller/configuration/domain-dc.conf'
        owner: '{{ wildfly_user }}'
        group: '{{ wildfly_group }}'
        mode: '0640'
      notify:
        - restart wildfly domain services
        - change data mode

    - name: create symlink to /etc/default/wildfly-dc.conf
      become: true
      file:
        state: link
        src: '{{ wildfly_conf_dir }}/{{ wildfly_dc_instance_name }}.conf'
        dest: /etc/default/{{ wildfly_dc_instance_name }}.conf
        force: true
      when: wildfly_system_integration
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master', 'domain-master-slave' ]

- name: 'prepare daily wildfly logrotate'
  become: true
  template:
    dest: '/etc/logrotate.d/{{ wildfly_system_name }}'
    src: "logrotate.j2"
    owner: "root"
    group: "root"
    mode: "0644"

- name: 'check cron.d folder'
  stat:
    path: /etc/cron.d
  register: cron_d_dir

- name: 'prepare daily logrotate cron.d task'
  become: true
  template:
    dest: '/etc/cron.d/{{ wildfly_system_name }}-logs'
    src: "wildfly-logs.j2"
    owner: "root"
    group: "root"
    mode: "0644"
  when:
    - cron_d_dir.stat.exists
    - not wildfly_log_compress_local_user

- block:
  - name: "prepare daily log compress domain mode Wildfly local user's crontab task with direcrory grouping"
    ansible.builtin.cron:
      user: '{{ wildfly_user }}'
      name: "check dirs"
      minute: "10"
      hour: "2"
      job: 'nice -n 10 find {{ wildfly_directory_grouping_log }}/servers/ \( -name \*????-??-??.log -or -name \*log.????-??-?? \)  ! \( -name \*.xz -or -name \*.gz -or -name \*.zip -or -name \*.tgz \) -mtime +1 -type f -print0 | xargs -0 -t -r {{ wildfly_log_compress_command }} {{ wildfly_log_compress_options }}'
  - name: "prepare daily GC log compress domain mode Wildfly local user's crontab task with direcrory grouping"
    ansible.builtin.cron:
      user: '{{ wildfly_user }}'
      name: "check dirs"
      minute: "10"
      hour: "2"
      job: 'nice -n 10 find {{ wildfly_gc_dir }}/ \( -name gc[_-]\*.log -or -name gc[_-]\*.log.\? -or -name gc[_-]\*.log.\?? -or -name gc[_-]\*.log.\??? \) ! \( -name \*.xz -or -name \*.gz -or -name \*.zip -or -name \*.tgz \) -mtime +1 -type f -print0 | xargs -0 -t -r {{ wildfly_log_compress_command }} -S .`date +\%Y\%m\%d_\%H\%M`.xz {{ wildfly_log_compress_options }}'
  when:
    - wildfly_log_compress_local_user
    - wildfly_role == 'domain-slave' or wildfly_role == 'domain-master-slave'
    - wildfly_directory_grouping_by_type is true and wildfly_directory_grouping_log is defined and wildfly_directory_grouping_log

- block:
  - name: "prepare daily log compress domain mode Wildfly local user's crontab task"
    ansible.builtin.cron:
      user: '{{ wildfly_user }}'
      name: "check dirs"
      minute: "10"
      hour: "2"
      job: 'nice -n 10 find {{ wildfly_directory_grouping_log }}/servers/ \( -name \*????-??-??.log -or -name \*log.????-??-?? \)  ! \( -name \*.xz -or -name \*.gz -or -name \*.zip -or -name \*.tgz \) -mtime +1 -type f -print0 | xargs -0 -t -r {{ wildfly_log_compress_command }} {{ wildfly_log_compress_options }}'
  - name: "prepare daily GC log compress domain mode Wildfly local user's crontab task"
    ansible.builtin.cron:
      user: '{{ wildfly_user }}'
      name: "check dirs"
      minute: "10"
      hour: "2"
      job: 'nice -n 10 find {{ wildfly_gc_dir }}/ \( -name gc[_-]\*.log -or -name gc[_-]\*.log.\? -or -name gc[_-]\*.log.\?? -or -name gc[_-]\*.log.\??? \) ! \( -name \*.xz -or -name \*.gz -or -name \*.zip -or -name \*.tgz \) -mtime +1 -type f -print0 | xargs -0 -t -r {{ wildfly_log_compress_command }} -S .`date +\%Y\%m\%d_\%H\%M`.xz {{ wildfly_log_compress_options }}'
  when:
    - wildfly_log_compress_local_user
    - wildfly_role == 'domain-slave' or wildfly_role == 'domain-master-slave'
    - not (wildfly_directory_grouping_by_type is true and wildfly_directory_grouping_log is defined and wildfly_directory_grouping_log)

- block:
  - name: "prepare daily log compress for standalonw Wildfly local user's crontab task"
    ansible.builtin.cron:
      user: '{{ wildfly_user }}'
      name: "check dirs"
      minute: "10"
      hour: "2"
      job: 'nice -n 10 find {{ wildfly_base }}/standalone/log/ \( -name \*????-??-??.log -or -name \*log.????-??-?? \)  ! \( -name \*.xz -or -name \*.gz -or -name \*.zip -or -name \*.tgz \) -mtime +1 -type f -print0 | xargs -0 -t -r {{ wildfly_log_compress_command }} {{ wildfly_log_compress_options }}'
  when:
    - wildfly_log_compress_local_user
    - wildfly_role == 'standalone'

- include: configure-properties.yml

- block:
  - name: create template to upstream init script
    become: true
    template:
      src: wildfly_init.j2
      dest: '{{ wildfly_init_dir }}/{{ wildfly_instance_name }}'
      owner: root
      group: root
      mode: '0755'
      force: true
    #  when: ansible_service_mgr in ['init', 'upstart']
    notify:
      - restart wildfly services
      - change data mode
    when:
      - wildfly_system_integration

  - name: create template to upstream init script into application folder
    template:
      src: wildfly_init.j2
      dest: '{{ wildfly_base }}/domain/configuration/{{ wildfly_instance_name }}'
      owner: '{{ wildfly_user }}'
      group: '{{ wildfly_group }}'
      mode: '0755'
    notify:
      - restart wildfly services
      - change data mode
    when: not wildfly_system_integration

  - name: 'create symlink to {{ wildfly_base }}/domain/configuration/{{ wildfly_instance_name }}'
    become: true
    file:
      state: link
      src: '{{ wildfly_base }}/domain/configuration/{{ wildfly_instance_name }}'
      dest: '{{ wildfly_init_dir }}/{{ wildfly_instance_name }}'
      force: true
    when: not wildfly_system_integration

- block:
  - name: create template to upstream domain-controller init script
    become: true
    template:
      src: wildfly-dc_init.j2
      dest: '{{ wildfly_init_dir }}/{{ wildfly_dc_instance_name }}'
      owner: root
      group: root
      mode: '0755'
    notify:
      - restart wildfly domain services
      - change data mode
    when: wildfly_system_integration

  - name: create template to upstream domain-controller init script into application folder
    template:
      src: wildfly-dc_init.j2
      dest: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}'
      owner: '{{ wildfly_user }}'
      group: '{{ wildfly_group }}'
      mode: '0755'
    notify:
      - restart wildfly domain services
      - change data mode
    when: not wildfly_system_integration

  - name: 'create symlink to {{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}'
    become: true
    file:
      state: link
      src: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}'
      dest: '{{ wildfly_init_dir }}/{{ wildfly_dc_instance_name }}'
      force: true
    when: not wildfly_system_integration
  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master', 'domain-master-slave' ]

- block:
    - name: copy wildfly systemd unit file
      become: true
      template:
        src: wildfly.service.j2
        dest: '{{ wildfly_systemd_dir }}/{{ wildfly_instance_name }}.service'
        owner: root
        group: root
        mode: 0644
      notify:
        - systemd daemon reload
        - restart wildfly services
        - change data mode
        - systemd daemon reload
      when: wildfly_system_integration

    - name: copy wildfly systemd unit file to application folder
      template:
        src: wildfly.service.j2
        dest: '{{ wildfly_base }}/domain/configuration/{{ wildfly_instance_name }}.service'
        owner: '{{ wildfly_user }}'
        group:  '{{ wildfly_group }}'
        mode: 0644
      notify:
        - systemd daemon reload
        - restart wildfly services
        - change data mode
        - systemd daemon reload
      when: not wildfly_system_integration

    - name: 'create symlink to {{ wildfly_base }}/{{ wildfly_mode }}/configuration/{{ wildfly_instance_name }}.service'
      become: true
      file:
        state: link
        src: '{{ wildfly_base }}/{{ wildfly_mode }}/configuration/{{ wildfly_instance_name }}.service'
        dest: '{{ wildfly_systemd_dir }}/{{ wildfly_instance_name }}.service'
        force: true
      when: not wildfly_system_integration
  when:
    - ansible_service_mgr == 'systemd'
    - ((ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 6) or ansible_os_family != 'RedHat')

- block:
  - name: copy wildfly domain controller systemd unit file
    become: true
    template:
      src: wildfly-dc.service.j2
      dest: '{{ wildfly_systemd_dir }}/{{ wildfly_dc_instance_name }}.service'
      owner: root
      group: root
      mode: 0644
    notify:
      - restart wildfly domain services
      - change data mode
      - systemd daemon reload
    when: wildfly_system_integration

  - name: copy wildfly domain controller systemd unit file to application folder
    template:
      src: wildfly-dc.service.j2
      dest: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}.service'
      owner: '{{ wildfly_user }}'
      group: '{{ wildfly_group }}'
      mode: 0644
    notify:
      - restart wildfly domain services
      - change data mode
      - systemd daemon reload
    when: not wildfly_system_integration

  - name: 'create symlink to {{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}.service'
    become: true
    file:
      state: link
      src: '{{ wildfly_base }}/domain-controller/configuration/{{ wildfly_dc_instance_name }}.service'
      dest: '{{ wildfly_systemd_dir }}/{{ wildfly_dc_instance_name }}.service'
      force: true
    when: not wildfly_system_integration

  when:
    - wildfly_mode == 'domain'
    - wildfly_role in [ 'domain-master', 'domain-master-slave' ]
    - ansible_service_mgr == 'systemd'
    - ((ansible_os_family == 'RedHat' and ansible_distribution_major_version|int  > 6) or ansible_os_family != 'RedHat')

- name: copy wildfly systemd start script file
  template:
    src: launch.sh.j2
    dest: '{{ wildfly_base }}/bin/launch.sh'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: 0750
  notify:
      - change data mode
  when:
    - wildfly_mode in [ 'standalone', 'domain' ]
    - ansible_service_mgr == 'systemd'
    - ((ansible_os_family == 'RedHat' and ansible_distribution_major_version|int > 6) or ansible_os_family != 'RedHat')

- name: create wildfly var directories
  become: true
  file:
    path: '{{ wildfly_var_dir}}/{{ item }}'
    state: directory
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0770'
  with_items:
   - pid
   - lock
  when: not wildfly_system_integration
