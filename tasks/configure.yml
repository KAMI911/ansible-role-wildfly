---
# task file for wildfly

- name: create wildfly etc directory
  file:
    path: '{{ wildfly_conf_dir }}'
    state: directory
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '0750'

- name: copy wildfly configuration
  template:
    src: wildfly.conf.j2
    dest: '{{ wildfly_conf_dir }}/{{ wildfly_instance_name }}.conf'
    owner: root
    group: root
    mode: '0640'
  notify:
    - restart wildfly
    - change data mode

- name: copy wildfly domain-controller configuration
  template:
    src: wildfly-dc.conf.j2
    dest: '{{ wildfly_conf_dir }}/{{ wildfly_dc_instance_name }}.conf'
    owner: root
    group: root
    mode: '0640'
  notify:
    - restart wildfly
    - change data mode
  when: wildfly_role == 'domain-master-slave'

- name: 'create domain user configuration in: {{ wildfly_dir }}/domain/configuration'
  copy:
    src: '{{ item }}'
    dest: '{{ wildfly_dir }}/domain/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_file_mode }}'
  with_items:
   - application-roles.properties
   - application-users.properties
   - mgmt-groups.properties
   - mgmt-users.properties

- name: 'create domain server configuration in: {{ wildfly_dir }}/domain/configuration'
  copy:
    src: '{{ wildfly_version }}/domain/{{ item }}'
    dest: '{{ wildfly_dir }}/domain/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_file_mode }}'
  with_items:
   - default-server-logging.properties
   - domain.xml
   - host-master.xml
   - host-slave.xml
   - host.xml
   - logging.properties
  when: wildfly_mode == 'domain'

- name: 'create domain-controller user configuration in: {{ wildfly_dir }}/domain-controller/configuration'
  copy:
    src: '{{ item }}'
    dest: '{{ wildfly_dir }}/domain-controller/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_file_mode }}'
  with_items:
   - application-roles.properties
   - application-users.properties
   - mgmt-groups.properties
   - mgmt-users.properties
  when: wildfly_role == 'domain-master-slave'

- name: 'create domain-controller server configuration in: {{ wildfly_dir }}/domain-controller/configuration'
  copy:
    src: '{{ wildfly_version }}/domain/{{ item }}'
    dest: '{{ wildfly_dir }}/domain-controller/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_file_mode }}'
  with_items:
   - default-server-logging.properties
   - domain.xml
   - host-master.xml
   - logging.properties
  when: wildfly_role == 'domain-master-slave'

- name: 'create standalone user configuration in: {{ wildfly_dir }}/standalone/configuration'
  copy:
    src: '{{ item }}'
    dest: '{{ wildfly_dir }}/standalone/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
  with_items:
   - application-roles.properties
   - application-users.properties
   - mgmt-groups.properties
   - mgmt-users.properties
  when: wildfly_mode == 'standalone'

- name: 'create standalone server configuration configuration in: {{ wildfly_dir }}/standalone/configuration'
  copy:
    src: '{{ wildfly_version }}/standalone/{{ item }}'
    dest: '{{ wildfly_dir }}/standalone/configuration/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
  with_items:
   - logging.properties
   - standalone-full-ha.xml
   - standalone-full.xml
   - standalone-ha.xml
   - standalone.xml
  when: wildfly_mode == 'standalone'

- name: create symlink to /etc/default/wildfly.conf
  file:
    state: link
    src: '{{ wildfly_conf_dir }}/{{ wildfly_instance_name }}.conf'
    dest: /etc/default/{{ wildfly_instance_name }}.conf

- include: configure-properties.yml

- name: create template to upstream init script
  template:
    src: wildfly_init.j2
    dest: '{{ wildfly_init_dir }}/{{ wildfly_instance_name }}'
    owner: root
    group: root
    mode: '0755'
    force: yes
#  when: ansible_service_mgr in ['init', 'upstart']
  notify:
    - restart wildfly
    - change data mode

- name: copy wildfly domain-controller configuration
  template:
    src: wildfly-dc_init.j2
    dest: '{{ wildfly_init_dir }}/{{ wildfly_dc_instance_name }}'
    owner: root
    group: root
    mode: '0755'
  notify:
    - restart wildfly
    - change data mode
  when: wildfly_role == 'domain-master-slave'

- name: copy wildfly systemd unit file
  template: src=wildfly.service.j2 dest={{ wildfly_systemd_dir }}/{{ wildfly_instance_name }}.service owner=root
            group=root mode=0640
  when: ansible_service_mgr == 'systemd' and ( ( ansible_os_family == 'RedHat' and ansible_distribution_major_version|int  > 6 ) or ansible_os_family != 'RedHat' )
  notify:
    - restart wildfly
    - change data mode

- name: copy wildfly systemd unit file
  template: src=wildfly-dc.service.j2 dest={{ wildfly_systemd_dir }}/{{ wildfly_dc_instance_name }}.service owner=root
            group=root mode=0640
  when: wildfly_role == 'domain-master-slave' and ansible_service_mgr == 'systemd' and ( ( ansible_os_family == 'RedHat' and ansible_distribution_major_version|int  > 6 ) or ansible_os_family != 'RedHat' )
  notify:
    - restart wildfly
    - change data mode

- block:
  - name: open wildfly management http tcp port
    firewalld:
      port: '{{ wildfly_manage_http_port }}/tcp'
      permanent: yes
      immediate: yes
      state: enabled

  - name: open wildfly management https tcp port
    firewalld:
      port: '{{ wildfly_manage_https_port }}/tcp'
      permanent: yes
      immediate: yes
      state: enabled

  - name: open wildfly http tcp port
    firewalld:
      port: '{{ wildfly_http_port }}/tcp'
      permanent: yes
      immediate: yes
      state: enabled

  - name: open wildfly https tcp port
    firewalld:
      port: '{{ wildfly_https_port }}/tcp'
      permanent: yes
      immediate: yes
      state: enabled
  when: ansible_distribution_version|version_compare(7, '=') and wildfly_manage_firewall

- meta: flush_handlers

- block:
    - name: enable and start the service
      service:
        name: '{{ wildfly_instance_name }}'
        state: started
        enabled: yes
#    - name: wait for wildfly to start
#      wait_for:
#        path: '{{ wildfly_dir }}/{{ wildfly_mode }}/log/server.log'
#        search_regex: 'started in'
#      ignore_errors: yes
    - name: cat file
      command: 'cat {{ wildfly_dir }}/{{ wildfly_mode }}/log/server.log'
      ignore_errors: yes
  when: wildfly_manage_service and wildfly_mode == 'standalone'

- block:
    - name: enable and start the service
      service:
        name: '{{ wildfly_instance_name }}'
        state: started
        enabled: yes
#    - name: wait for wildfly to start
#      wait_for:
#        path: '{{ wildfly_dir }}/{{ wildfly_mode }}/log/host-controller.log'
#        search_regex: 'started in'
#      ignore_errors: yes
    - name: cat file
      command: 'cat {{ wildfly_dir }}/{{ wildfly_mode }}/log/host-controller.log'
      ignore_errors: yes
  when: wildfly_manage_service and wildfly_mode == 'domain'

- name: delete wildfly tar file
  file:
    path: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    state: absent
  when: wildfly_installer_keep == False

