---
# task file for wildfly

- name: check if Wildfly is already installed
  stat: path='{{ wildfly_dir }}/README.txt'
  register: wildfly_installed

- block:
    - name: create wildfly group
      group:
        name: '{{ wildfly_group }}'
        system: true
        state: present

    - name: create wildfly user
      user:
        name: '{{ wildfly_user }}'
        group: '{{ wildfly_group }}'
        createhome: false
        shell: "{{ wildfly_user_shell |default(omit) }}"
        state: present
        system: true
  when: wildfly_manage_user

- name: 'create application directory: {{ wildfly_dir }}'
  file:
    path: '{{ wildfly_dir }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: true
    state: directory

- name: create download directory
  file:
    path: '{{ wildfly_download_dir }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: true
    state: directory

- name: is already downloaded locally
  stat:
    path: '{{ wildfly_download_file }}'
  delegate_to: localhost
  register: wildfly_is_local_download_file
  when: wildfly_installer_local

- name: is already downloaded
  stat:
    path: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
  register: wildfly_is_download_file

- name: copy local wildfly tar file
  copy:
    src: '{{ wildfly_download_file }}'
    dest: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    mode: 0644
  when: (not wildfly_is_download_file.stat.exists or wildfly_installer_force_overwrite) and
        not wildfly_installer_force_download and wildfly_installer_local

- block:
    - name: 'downloading Wildfly {{ wildfly_download_file }} to local machine'
      get_url:
        url: '{{ wildfly_download_url }}'
        validate_certs: '{{ wildfly_download_validate_certs }}'
        dest: './{{ wildfly_download_file }}'
        mode: 0644
      delegate_to: localhost
      run_once: true
      when: (not wildfly_is_local_download_file.stat.exists or wildfly_installer_force_overwrite) and
            wildfly_installer_force_download

    - name: copy downloaded wildfly tar file
      copy:
        src: '{{ wildfly_download_file }}'
        dest: '{{ wildfly_archive }}'
        mode: 0644
      when: (not wildfly_is_download_file.stat.exists or wildfly_installer_force_overwrite)
  when: wildfly_installer_local

- name: 'download wildfly tar file {{ wildfly_download_file }}'
  get_url:
    url: '{{ wildfly_download_url }}'
    dest: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    validate_certs: '{{ wildfly_download_validate_certs }}'
    mode: 0644
  when: (not wildfly_is_download_file.stat.exists or wildfly_installer_force_overwrite) and
        wildfly_installer_force_download and not wildfly_installer_local
