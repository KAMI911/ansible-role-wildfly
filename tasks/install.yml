---
# task file for wildfly

- stat: path='{{ wildfly_dir }}/README.txt'
  register: wildfly_installed

- name: Install OpenJDK
  yum:
    name: java-1.8.0-openjdk-headless
    state: present
  when: wildfly_manage_java_pkg

- block:
    - name: create wildfly group
      group:
        name: '{{ wildfly_group }}'
        system: yes
        state: present

    - name: create wildfly user
      user:
        name: '{{ wildfly_user }}'
        group: '{{ wildfly_group }}'
        createhome: no
        shell: "{{ wildfly_user_shell |default(omit) }}"
        state: present
        system: yes
  when: wildfly_manage_user

- name: 'create application directory: {{ wildfly_dir }}'
  file:
    path: '{{ wildfly_dir }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory

- name: create wildfly link directory
  file:
    path: '{{ wildfly_install_dir }}/wildfly'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: no
    state: directory

- name: create wildfly log directory
  file:
    path: '{{ wildfly_console_log_dir }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory

- name: create download directory
  file:
    path: '{{ wildfly_download_dir }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory

- name: is already downloaded locally
  local_action:
    module: stat
    path: '{{ wildfly_download_file }}'
  register: wildfly_is_local_download_file
  when: wildfly_installer_local == True

- name: is already downloaded
  stat:
    path: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
  register: wildfly_is_download_file

- name: copy local wildfly tar file
  copy:
    src: '{{ wildfly_download_file }}'
    dest: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    mode: 644
  when: ( wildfly_is_download_file.stat.exists == False or wildfly_installer_force_overwrite == True ) and wildfly_installer_force_download == False and wildfly_installer_local == True

- block:
    - name: 'downloading Wildfly {{ wildfly_download_file }} to local machine'
      local_action:
        module: get_url
        url: '{{ wildfly_download_url }}'
        validate_certs: '{{ wildfly_download_validate_certs }}'
        dest: './{{ wildfly_download_file }}'
        mode: 0644
      run_once: True
      when: ( wildfly_is_local_download_file.stat.exists == False or wildfly_installer_force_overwrite == True ) and wildfly_installer_force_download == True and wildfly_installer_local == True

    - name: copy downloaded wildfly tar file
      copy:
        src: '{{ wildfly_download_file }}'
        dest: '{{ wildfly_archive }}'
        mode: 0644
      when: (wildfly_is_download_file.stat.exists == False or wildfly_installer_force_overwrite == True) and wildfly_installer_local == True
  when: wildfly_installer_local == True

- name: 'download wildfly tar file {{ wildfly_download_file }}'
  get_url:
    url: '{{ wildfly_download_url }}'
    dest: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    validate_certs: '{{ wildfly_download_validate_certs }}'
    mode: 644
  when: (wildfly_is_download_file.stat.exists == False or wildfly_installer_force_overwrite == True) and wildfly_installer_force_download == True and wildfly_installer_local == False

- name: 'unarchive downloaded {{ wildfly_download_file }} file'
  unarchive:
    src: '{{ wildfly_download_dir }}/{{ wildfly_download_file }}'
    dest: '{{ wildfly_install_dir }}/{{ wildfly_instance_name }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    # mode: '{{ wildfly_dir_mode }}'
    copy: no
    creates: "{{ wildfly_dir }}/bin/{{ wildfly_mode }}.sh"
    exclude:
      - "configuration"
  when: wildfly_installed.stat.exists == False or force_wildfly_install == True

- name: 'create domain configuration directory in: {{ wildfly_dir }}'
  file:
    path: '{{ wildfly_dir }}/domain/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory
  with_items:
    - configuration
    - data/content
    - tmp/auth
  when: wildfly_mode == 'domain'

- name: 'create domain-controller configuration directory in: {{ wildfly_dir }}'
  file:
    path: '{{ wildfly_dir }}/domain-controller/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory
  with_items:
    - configuration
    - data/content
    - tmp/auth
  when: wildfly_role == 'domain-master-slave'

- name: 'create standalone configuration directory in: {{ wildfly_dir }}'
  file:
    path: '{{ wildfly_dir }}/standalone/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory
  with_items:
    - configuration
    - deployments
    - lib/ext
    - tmp/auth
  when: wildfly_mode == 'standalone'

- name: 'create configuration directory for domain and standalone'
  file:
    path: '{{ wildfly_dir }}/{{ item }}'
    owner: '{{ wildfly_user }}'
    group: '{{ wildfly_group }}'
    mode: '{{ wildfly_dir_mode }}'
    recurse: yes
    state: directory
  with_items:
    - domain/configuration
    - standalone/configuration

- name: create symlink to installed version
  file:
    state: link
    src: '{{ wildfly_dir }}'
    dest: '{{ wildfly_link_dir }}'
    force: yes
  when: wildfly_create_symlink
